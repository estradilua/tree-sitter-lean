======
syntax
======

syntax "=>" term:2 : term

---

(module
  (command
    (cmd_syntax
      (syntax_p
        (atom
          (str_lit)))
      (syntax_p
        (cat
          (ident)
          (precedence
            (num_lit))))
      (ident))))

====================
initialize ambiguous
====================

initialize foo : Int ← pure ()
                       return 2

---

(module
  (command
    (cmd_initialize
      (ident)
      (type_spec
        (term
          (term_ident
            (ident))))
      (left_arrow)
      (do_seq
        (do_seq_indent
          (do_seq_item
            (do_elem
              (do_expr
                (term
                  (term_ident
                    (ident))
                  (term_tuple
                    (paren_open)
                    (paren_close))))))
          (do_seq_item
            (do_elem
              (do_expr
                (term
                  (term_ident
                    (ident))
                  (term_num
                    (num_lit)))))))))))

=================
initialize do_seq
=================

initialize let foo : Int ← pure ()
           return 2

---

(module
  (command
    (cmd_initialize
      (do_seq
        (do_seq_indent
          (do_seq_item
            (do_elem
              (do_let_arrow
                (do_id_decl
                  (ident)
                  (type_spec
                    (term
                      (term_ident
                        (ident))))
                  (left_arrow)
                  (do_elem
                    (do_expr
                      (term
                        (term_ident
                          (ident))
                        (term_tuple
                          (paren_open)
                          (paren_close)))))))))
          (do_seq_item
            (do_elem
              (do_expr
                (term
                  (term_ident
                    (ident))
                  (term_num
                    (num_lit)))))))))))

===================================
nested do_seq blocks ending at once
===================================

initialize
  do
    let a := 1

---

(module
  (command
    (cmd_initialize
      (do_seq
        (do_seq_indent
          (do_seq_item
            (do_elem
              (do_nested
                (do_seq
                  (do_seq_indent
                    (do_seq_item
                      (do_elem
                        (do_let
                          (let_decl
                            (let_pat_decl
                              (term
                                (term_ident
                                  (ident)))
                              (defeq)
                              (term
                                (term_num
                                  (num_lit))))))))))))))))))

================
inductive vacant
================


inductive Vacant : Type where

---

(module
  (command
    (cmd_declaration
      (inductive
        (decl_ident
          (ident))
        (type_spec
          (term
            (term_type)))))))

==================
inductive either''
==================

inductive Either'' : Type u → Type v → Type (max u v + 1) where
  | left : {α : Type u} → {β : Type v} → α → Either'' α β
  | right : β → Either'' α β

---

(module
  (command
    (cmd_declaration
      (inductive
        (decl_ident
          (ident))
        (type_spec
          (term
            (term_type
              (level_ident
                (ident)))
            (term_arrow
              (right_arrow))
            (term_type
              (level_ident
                (ident)))
            (term_arrow
              (right_arrow))
            (term_type)
            (term_paren
              (paren_open)
              (term
                (term_ident
                  (ident))
                (term_ident
                  (ident))
                (term_ident
                  (ident))
                (term_other)
                (term_num
                  (num_lit)))
              (paren_close))))
        (ctor
          (ident)
          (type_spec
            (term
              (term_dep_arrow
                (bracketed_binder
                  (implicit_binder
                    (binder_ident
                      (ident))
                    (type_spec
                      (term
                        (term_type
                          (level_ident
                            (ident)))))))
                (right_arrow)
                (term
                  (term_dep_arrow
                    (bracketed_binder
                      (implicit_binder
                        (binder_ident
                          (ident))
                        (type_spec
                          (term
                            (term_type
                              (level_ident
                                (ident)))))))
                    (right_arrow)
                    (term
                      (term_ident
                        (ident))
                      (term_arrow
                        (right_arrow))
                      (term_ident
                        (ident))
                      (term_ident
                        (ident))
                      (term_ident
                        (ident)))))))))
        (ctor
          (ident)
          (type_spec
            (term
              (term_ident
                (ident))
              (term_arrow
                (right_arrow))
              (term_ident
                (ident))
              (term_ident
                (ident))
              (term_ident
                (ident)))))))))

==========================
definition with match_alts
==========================

def AtLeastOne.head : AtLeastOne α → α
  | ⟨x, _⟩ => x
  | .mk x _ => x

---

(module
  (command
    (cmd_declaration
      (definition
        (decl_ident
          (ident))
        (type_spec
          (term
            (term_ident
              (ident))
            (term_ident
              (ident))
            (term_arrow
              (right_arrow))
            (term_ident
              (ident))))
        (decl_val
          (decl_val_eqns
            (match_alts
              (match_alt
                (term
                  (term_anonymous_ctor
                    (term
                      (term_ident
                        (ident)))
                    (term
                      (term_hole))))
                (darrow)
                (term
                  (term_ident
                    (ident))))
              (match_alt
                (term
                  (term_cdot)
                  (term_ident
                    (ident))
                  (term_ident
                    (ident))
                  (term_hole))
                (darrow)
                (term
                  (term_ident
                    (ident)))))))))))

==============
non-identifier
:error
==============

import Lean.Parser. Command

---



================
non-identifier 2
:error
================

import Lean .Parser.Command

---



=======================
"by" inside parentheses
=======================

example : True := by
  exact (by have := trivial
            trivial)
  done

---

(module
  (command
    (cmd_declaration
      (example
        (type_spec
          (term
            (term_ident
              (ident))))
        (decl_val
          (decl_val_simple
            (defeq)
            (term
              (term_by
                (tactic_seq
                  (tactic_seq_indented
                    (tactic_p
                      (tactic_other
                        (ident)
                        (term
                          (term_paren
                            (paren_open)
                            (term
                              (term_by
                                (tactic_seq
                                  (tactic_seq_indented
                                    (tactic_p
                                      (tactic_other
                                        (ident)
                                        (term
                                          (term_other)
                                          (term_other)
                                          (term_ident
                                            (ident)))))
                                    (tactic_p
                                      (tactic_other
                                        (ident)))))))
                            (paren_close)))))
                    (tactic_p
                      (tactic_other
                        (ident)))))))))))))

=============================
silly parenthesis indentation
=============================

example : True := by
  exact (by
  have := trivial
  trivial)
  done

---

(module
  (command
    (cmd_declaration
      (example
        (type_spec
          (term
            (term_ident
              (ident))))
        (decl_val
          (decl_val_simple
            (defeq)
            (term
              (term_by
                (tactic_seq
                  (tactic_seq_indented
                    (tactic_p
                      (tactic_other
                        (ident)
                        (term
                          (term_paren
                            (paren_open)
                            (term
                              (term_by
                                (tactic_seq
                                  (tactic_seq_indented
                                    (tactic_p
                                      (tactic_other
                                        (ident)
                                        (term
                                          (term_other)
                                          (term_other)
                                          (term_ident
                                            (ident)))))
                                    (tactic_p
                                      (tactic_other
                                        (ident)))))))
                            (paren_close)))))
                    (tactic_p
                      (tactic_other
                        (ident)))))))))))))
